#!/usr/bin/env python3

import argparse
import em
# import emlib
import os
import tempfile

# class DebugInfoHooks(emlib.Hook):

#     def __init__(self, interp):
#         self.interp = interp

#     def beforeInclude(self, file, locals, name):
#         self.interp.write("beforeInclude")
#         return True

#     def beforeTokens(self, tokens, locals):
#         self.interp.write('beforeTokens\n')
#         # print("atToken", token)
#         return False

#     def preSimple(self, code, subtokens, locals):
#         self.interp.write('preSimple\n');
#         return False

def processDebug(in_file_path, out_file_path):
    config = em.Configuration(prefix='`')
    with tempfile.TemporaryFile("w+t") as temp_file:
        with open(in_file_path, "r") as in_file:
            full_in_file_path = os.path.realpath(in_file.name)
            # temp_file.write(f"`?{full_in_file_path}\n")
            for i, line in enumerate(in_file):
                if "`" in line and not "`[" in line:
                    temp_file.write(f'``line {i+1} "{full_in_file_path}" 0\n')
                temp_file.write(line)

        temp_file.seek(0)
        with open(out_file_path, "w") as out_file:
            with em.Interpreter(config=config, output=out_file) as interp:
                interp.file(temp_file)

def process(in_file_path, out_file_path):
    config = em.Configuration(prefix='`')
    with open(in_file_path, "r") as in_file:
        with open(out_file_path, "w") as out_file:
            with em.Interpreter(config=config, output=out_file) as interp:
                interp.file(in_file)

def main():
    parser = argparse.ArgumentParser( prog='prepro', description='Python preprocessor powered by em.py')
    parser.add_argument("in_file_path")
    parser.add_argument("out_file_path")
    parser.add_argument("-d", "--debug", help="Print out `line directives to aid linters",
                        action="store_true")
    args = parser.parse_args()
    if (args.debug):
        processDebug(args.in_file_path, args.out_file_path)
    else:
        process(args.in_file_path, args.out_file_path)
main()

