#!/usr/bin/env python3

import argparse
import em
# import emlib
import os
import tempfile

# class DebugInfoHooks(emlib.Hook):

#     def __init__(self, interp):
#         self.interp = interp

#     def beforeInclude(self, file, locals, name):
#         self.interp.write("beforeInclude")
#         return True

#     def beforeTokens(self, tokens, locals):
#         self.interp.write('beforeTokens\n')
#         # print("atToken", token)
#         return False

#     def preSimple(self, code, subtokens, locals):
#         self.interp.write('preSimple\n');
#         return False

def process_rtl(in_file_paths, out_file_path, debug=False):
    with open(out_file_path, "w") as out_file, tempfile.TemporaryFile("w+t") as temp_file:
        for in_file_path in in_file_paths:
            in_file = open(in_file_path, "r")
            # Add `list directives and save to temp file
            full_in_file_path = os.path.realpath(in_file.name)
            temp_file.write(f"// THIS FILE AUTOMATICALLY GENERATED from {in_file.name}. DO NOT EDIT.\n\n")
            for i, line in enumerate(in_file):
                if debug:
                    if "`" in line and not "`[" in line:
                        temp_file.write(f'``line {i+1} "{full_in_file_path}" 0\n')
                temp_file.write(line)
            temp_file.write("\n")
            in_file.close()
        temp_file.seek(0)


        config = em.Configuration(prefix='`')
        with em.Interpreter(config=config, output=out_file) as interp:
            interp.file(temp_file)

def main():
    parser = argparse.ArgumentParser( prog='prepro', description='Python preprocessor powered by em.py')
    parser.add_argument("in_files", nargs="*")
    parser.add_argument("-o", "--out_file")
    parser.add_argument("-d", "--debug", help="Print out `line directives to aid linters",
                        action="store_true")
    args = parser.parse_args()

    if args.out_file == None:
        arg.out_file = sys.stdout

    process_rtl(args.in_files, args.out_file, debug=args.debug)

if __name__ == "__main__":
    main()

